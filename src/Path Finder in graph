
import java.util.*;

public class Main
{
    
    public static void findPath(ArrayList<ArrayList<Integer>> edges, int src, int dest, int V){
        
        int dist[] = new int[V];
        int parent[] = new int[V];
        
        if(!BFS(edges,src,dest,dist,parent)){
            System.out.println("Src and Dest are not connected");
            return;
        }
         
        LinkedList<Integer> path = new LinkedList<Integer>();
        
        path.add(dest);
        int temp = dest;
        
        while(parent[temp]!=-1){
            path.add(parent[temp]);
            temp = parent[temp];
        }
        
     System.out.println("Shortest path length is: " + dist[dest]); 
    System.out.println("Path is " ); 

     for(int i=path.size()-1;i>=0;i--)
        System.out.print(path.get(i)+" ");

    }
    
    public static boolean BFS(ArrayList<ArrayList<Integer>> edges, int src, int dest,int[] dist, int[] parent){
        
        Queue<Integer> q = new LinkedList<>();
        
        boolean[] visited = new boolean[dist.length];
        
        
        for(int i=0;i<dist.length;i++){
            dist[i] = Integer.MAX_VALUE;
             parent[i] = -1;
        }

        q.add(src);
        dist[src] = 0;
        visited[src] = true;
        
        while(!q.isEmpty()){
            int root = q.remove();
            
            for(int i=0;i<edges.get(root).size();i++){
                if(!visited[edges.get(root).get(i)]){
                    
                    visited[edges.get(root).get(i)] = true;
                    dist[edges.get(root).get(i)] = dist[root] + 1;
                    parent[edges.get(root).get(i)] = root;
                    
                    q.add(edges.get(root).get(i));
                    
                    if(edges.get(root).get(i) == dest)
                        return true;
                }
            }
        }
        return false;
    }
	public static void main(String[] args) {
	        Scanner sc = new Scanner(System.in);
	        
	        int V = sc.nextInt();
	        int E = sc.nextInt();
	        
	        
	        ArrayList<ArrayList<Integer>> edges = new ArrayList<ArrayList<Integer>>();
	        
	        for(int i=0;i<V;i++)
	            edges.add(new ArrayList<Integer>());
	            
	       for(int i=0;i<E;i++){
	           System.out.println("Enter src and des");
	           int src = sc.nextInt();
	           int dest = sc.nextInt();
	           
	           edges.get(src).add(dest);
	           edges.get(dest).add(src);
	       }
	       
	       System.out.println("Enter Source and Dest to find shortest path");
	       int src = sc.nextInt();
	       int dest = sc.nextInt();
	       
	       findPath(edges,src,dest,V);
	            
	       
	}
}
