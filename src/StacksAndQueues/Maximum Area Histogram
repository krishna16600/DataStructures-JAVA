
import java.util.*;
class Pair{
    int val;
    int index;
    Pair(int v, int i) {
        this.val = v;
        this.index = i;
    }
}
public class Main
{
    public static int[] nsr(int[] arr) {
        int[] ans = new int[arr.length];
        Stack<Pair> s = new Stack<>();
        
        int size = arr.length;
        
        for(int i=arr.length-1;i>=0;i--) {
            if(s.isEmpty()) {
                ans[i] = size;
            }
            else if(!s.isEmpty() && s.peek().val < arr[i]) {
                ans[i] = s.peek().index;
            }
            else if(!s.isEmpty() && s.peek().val >= arr[i] ) {
                while(!s.isEmpty() && s.peek().val >= arr[i]) {
                    s.pop();
                }
                
                if(s.isEmpty()) ans[i] = size;
                else ans[i] = s.peek().index;
            }
            s.push(new Pair(arr[i],i));
        }
        return ans;
    }
    
    public static int[] nsl(int[] arr){
        Stack<Pair> s = new Stack<Pair>();
        int[] ans = new int[arr.length];
        
        for(int i=0;i<arr.length;i++) {
            if(s.isEmpty()) ans[i] = -1;
            else if(!s.isEmpty() && s.peek().val < arr[i] ) {
                ans[i] = s.peek().index;
            }
            else if(!s.isEmpty() && s.peek().val >= arr[i]){
                while(!s.isEmpty() && s.peek().val >= arr[i]) {
                    s.pop();
                }
                if(s.isEmpty()) ans[i] = -1;
                else ans[i] = s.peek().index;
            }
             s.push(new Pair(arr[i],i));
        }
        return ans;
    }
    public static int findMax(int[] left, int[] right, int[] arr, int size){
        int[] width = new int[size];
	    for(int i=0;i<size;i++) {
	        width[i] = right[i] - left[i] -1;
	    }
	    
	    int[] area = new int[size];
	    int max = Integer.MIN_VALUE;
	    
	    for(int i=0;i<size;i++) {
	        area[i] = arr[i] * width[i];
	        max = Math.max(max,area[i]);
	    }
	    return max;
    }
	public static void main(String[] args) {
	    Scanner sc = new Scanner(System.in);
	   
	    int n = sc.nextInt();
	    int[] arr = new int[n];
	    int size = arr.length;
	    int j=0;
	    while(n-- > 0 ){
	        arr[j] = sc.nextInt();
	        j++;
	    }
	    int[] right = nsr(arr);
	    int[] left = nsl(arr);
	    
	    int ans = findMax(left, right, arr, size);
	   
	    System.out.println("max size: "+ ans);
	}
}
